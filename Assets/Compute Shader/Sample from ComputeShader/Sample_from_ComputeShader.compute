#pragma kernel CSMain

struct SampleData
{
    float4 color;
};


RWTexture2D<float4> Result;
RWStructuredBuffer<SampleData> sampleData;
// uint to match "uint3 id"
uint idx;
uint idy;
bool visualizeSample;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 1.0);
    //Result[id.xy] = float4(id.x/128.0, id.y/128.0, 0.0, 1.0); 

    // Force color
    //Result[id.xy] *= float4(1, 0, 0, 1);

    if (id.x == idx && id.y == idy)
    {
        SampleData sData = sampleData[0];
        sData.color = Result[id.xy];
        sampleData[0] = sData;
    }
    

    // Apply a crosshair around the sample location
    // Requires the Compute Shader to be recomputed everytime the sample location changes.
    if (visualizeSample == true)
    {
        // which pixel to apply each operation to
        int2 offsets[] = { float2(-1,  1), float2(0,  1), float2(1,  1),
                             float2(-1,  0),                float2(1,  0),
                             float2(-1, -1), float2(0, -1), float2(1, -1) };
        // operation : 0 - Copy center data | 1 - Set custom color
        int operation[] = { 0, 1, 0,
                       1,    1,
                       0, 1, 0 };

        // Visualize Sample Location
        for (int i = 0; i < 8; i++)
        {
            int2 offset = offsets[i];
            if (id.x == idx + offset.x && id.y == idy + offset.y)
            {
                if (operation[i] == 1)
                    Result[id.xy] = Result[float2(idx, idy)];
                else
                {
                    Result[id.xy] = 1;
                    //Result[id.xy] = 1 - saturate(Result[id.xy]); // invert clamped color
                }
            }
        }
    }
}
